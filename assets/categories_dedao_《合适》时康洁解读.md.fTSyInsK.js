import{f as t,D as e,c as o,o as a,a1 as r,b as i,k as l,w as A,a as B,H as s,a2 as n}from"./chunks/framework.Baju3tsf.js";const c=JSON.parse('{"title":"《合适》| 时康洁解读","description":"招生、选课、分配宿舍，系统如何设计才完美？有些东西不能用钱买到，怎么分才能让各方都满意?什么是最适交易循环算法？什么是延迟接受算法？从升学择校、相亲配对、牌照拍卖了解新兴实用经济学。","frontmatter":{"title":"《合适》| 时康洁解读","description":"招生、选课、分配宿舍，系统如何设计才完美？有些东西不能用钱买到，怎么分才能让各方都满意?什么是最适交易循环算法？什么是延迟接受算法？从升学择校、相亲配对、牌照拍卖了解新兴实用经济学。","created":"2025-01-18T16:07:11.000Z","modification_date":"2025-01-18T16:07:11.000Z","tags":["经济学/市场设计"],"cover_url":"https://piccdn3.umiwi.com/img/201803/12/201803121353169029672602.jpg?x-oss-process=image/resize,m_fill,h_224,w_168","source":"https://www.dedao.cn/audioBook/detail?id=kVDp75wdQjJN0xNy2ravzOlG69PKXo&score=4.7&learn_count=7","author":null},"headers":[],"relativePath":"categories/dedao/《合适》时康洁解读.md","filePath":"categories/dedao/《合适》时康洁解读.md"}'),C={name:"categories/dedao/《合适》时康洁解读.md"};function d(g,E,D,u,h,m){const p=e("Mermaid");return a(),o("div",null,[E[3]||(E[3]=r('<h1 id="《合适》时康洁解读" tabindex="-1">《合适》时康洁解读 <a class="header-anchor" href="#《合适》时康洁解读" aria-label="Permalink to &quot;《合适》时康洁解读&quot;">​</a></h1><h2 id="可视化总结" tabindex="-1">可视化总结 <a class="header-anchor" href="#可视化总结" aria-label="Permalink to &quot;可视化总结&quot;">​</a></h2><p>#经济学/市场设计</p><h2 id="mermaid-流程图-最适交易循环算法-ttc" tabindex="-1">Mermaid 流程图 - 最适交易循环算法 (TTC) <a class="header-anchor" href="#mermaid-流程图-最适交易循环算法-ttc" aria-label="Permalink to &quot;Mermaid 流程图 - 最适交易循环算法 (TTC)&quot;">​</a></h2>',4)),(a(),i(n,null,{default:A(()=>[s(p,{id:"mermaid-12",class:"mermaid",graph:"graph%20LR%0AA%5B%E5%BC%80%E5%A7%8B%5D%20--%3E%20B%7B%E6%9C%89%E5%A4%9A%E4%B8%AA%E9%9C%80%E8%A6%81%E5%8C%B9%E9%85%8D%E7%9A%84%E7%BB%84%3F%7D%3B%0AB%20--%20Yes%20--%3E%20C%5B%E6%94%B6%E9%9B%86%E6%AF%8F%E7%BB%84%E7%9A%84%E5%8C%B9%E9%85%8D%E9%9C%80%E6%B1%82%5D%3B%0AC%20--%3E%20D%7B%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%8F%AF%E4%BB%A5%E5%BD%A2%E6%88%90%E9%97%AD%E7%8E%AF%E7%9A%84%E4%BA%A4%E6%8D%A2%3F%7D%3B%0AD%20--%20Yes%20--%3E%20E%5B%E6%89%A7%E8%A1%8C%E4%BA%A4%E6%8D%A2%5D%3B%0AE%20--%3E%20F%7B%E6%98%AF%E5%90%A6%E8%BF%98%E6%9C%89%E6%9C%AA%E5%8C%B9%E9%85%8D%E7%9A%84%E7%BB%84%3F%7D%3B%0AF%20--%20Yes%20--%3E%20D%3B%0AF%20--%20No%20--%3E%20G%7B%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%BD%99%E8%B5%84%E6%BA%90%3F%7D%3B%0AG%20--%20Yes%20--%3E%20H%5B%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%BD%99%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E6%9B%BF%E6%8D%A2%5D%3B%0AH%20--%3E%20D%3B%0AG%20--%20No%20--%3E%20I%5B%E7%AE%97%E6%B3%95%E7%BB%93%E6%9D%9F%EF%BC%8C%E9%83%A8%E5%88%86%E7%BB%84%E6%9C%AA%E5%8C%B9%E9%85%8D%5D%3B%0AB%20--%20No%20--%3E%20J%5B%E7%AE%97%E6%B3%95%E7%BB%93%E6%9D%9F%EF%BC%8C%E6%97%A0%E9%9C%80%E5%8C%B9%E9%85%8D%5D%3B%0AI%20--%3E%20K%5B%E7%BB%93%E6%9D%9F%5D%3B%0AJ%20--%3E%20K%3B%0A"})]),fallback:A(()=>E[0]||(E[0]=[B(" Loading... ")])),_:1})),E[4]||(E[4]=l("h2",{id:"mermaid-状态图-延迟接受算法-gs",tabindex:"-1"},[B("Mermaid 状态图 - 延迟接受算法 (GS) "),l("a",{class:"header-anchor",href:"#mermaid-状态图-延迟接受算法-gs","aria-label":'Permalink to "Mermaid 状态图 - 延迟接受算法 (GS)"'},"​")],-1)),(a(),i(n,null,{default:A(()=>[s(p,{id:"mermaid-16",class:"mermaid",graph:"stateDiagram%0A%20%20%20%20%5B*%5D%20--%3E%20%E5%8C%B9%E9%85%8D%E5%BC%80%E5%A7%8B%3A%20%E6%89%80%E6%9C%89%E7%94%B7%E7%94%9F%E5%90%91%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E5%A5%B3%E7%94%9F%E8%A1%A8%E7%99%BD%0A%20%20%20%20%E5%8C%B9%E9%85%8D%E5%BC%80%E5%A7%8B%20--%3E%20%E5%A5%B3%E7%94%9F%E6%94%B6%E5%88%B0%E8%A1%A8%E7%99%BD%3A%20%E5%A5%B3%E7%94%9F%E4%BF%9D%E7%95%99%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E8%A1%A8%E7%99%BD%EF%BC%8C%E6%8B%92%E7%BB%9D%E5%85%B6%E4%BB%96%0A%20%20%20%20%E5%A5%B3%E7%94%9F%E6%94%B6%E5%88%B0%E8%A1%A8%E7%99%BD%20--%3E%20%E8%A2%AB%E6%8B%92%E7%BB%9D%E7%9A%84%E7%94%B7%E7%94%9F%3A%20%E5%90%91%E6%AC%A1%E5%96%9C%E6%AC%A2%E7%9A%84%E5%A5%B3%E7%94%9F%E8%A1%A8%E7%99%BD%0A%20%20%20%20%E8%A2%AB%E6%8B%92%E7%BB%9D%E7%9A%84%E7%94%B7%E7%94%9F%20--%3E%20%E5%A5%B3%E7%94%9F%E6%94%B6%E5%88%B0%E8%A1%A8%E7%99%BD%0A%20%20%20%20%E5%A5%B3%E7%94%9F%E6%94%B6%E5%88%B0%E8%A1%A8%E7%99%BD%20--%3E%20%E6%89%80%E6%9C%89%E7%94%B7%E7%94%9F%E8%A1%A8%E7%99%BD%E5%AE%8C%E6%AF%95%3A%20%E5%A5%B3%E7%94%9F%E9%80%89%E6%8B%A9%E6%9C%80%E7%BB%88%E6%8E%A5%E5%8F%97%E7%9A%84%E8%A1%A8%E7%99%BD%0A%20%20%20%20%E6%89%80%E6%9C%89%E7%94%B7%E7%94%9F%E8%A1%A8%E7%99%BD%E5%AE%8C%E6%AF%95%20--%3E%20%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9D%9F%3A%20%20%E5%BD%A2%E6%88%90%E7%A8%B3%E5%AE%9A%E5%8C%B9%E9%85%8D%0A%20%20%20%20%E5%8C%B9%E9%85%8D%E5%BC%80%E5%A7%8B%20--%3E%20%E6%B2%A1%E6%9C%89%E5%A5%B3%E7%94%9F%E6%94%B6%E5%88%B0%E8%A1%A8%E7%99%BD%3A%20%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9D%9F%EF%BC%8C%E9%83%A8%E5%88%86%E7%94%B7%E7%94%9F%E6%9C%AA%E5%8C%B9%E9%85%8D%0A%0A"})]),fallback:A(()=>E[1]||(E[1]=[B(" Loading... ")])),_:1})),E[5]||(E[5]=l("h2",{id:"mermaid-思维导图-《合适》",tabindex:"-1"},[B("Mermaid 思维导图 - 《合适》 "),l("a",{class:"header-anchor",href:"#mermaid-思维导图-《合适》","aria-label":'Permalink to "Mermaid 思维导图 - 《合适》"'},"​")],-1)),(a(),i(n,null,{default:A(()=>[s(p,{id:"mermaid-20",class:"mermaid",graph:"mindmap%0A%20%20root((%E5%90%88%E9%80%82))%0A%20%20%20%20%E7%AC%AC%E4%B8%80%E7%AB%A0(%E4%BB%80%E4%B9%88%E6%98%AF%E5%B8%82%E5%9C%BA%E8%AE%BE%E8%AE%A1)%0A%20%20%20%20%20%20%E5%85%AC%E5%B9%B3%E5%88%86%E9%85%8D%E7%A8%80%E7%BC%BA%E8%B5%84%E6%BA%90%0A%20%20%20%20%20%20%E4%BB%B7%E6%A0%BC%E6%9C%BA%E5%88%B6%E5%A4%B1%E6%95%88%E7%9A%84%E6%83%85%E5%86%B5%0A%20%20%20%20%20%20%E5%B8%82%E5%9C%BA%E8%AE%BE%E8%AE%A1%E7%9A%84%E7%9B%AE%E6%A0%87%0A%20%20%20%20%E7%AC%AC%E4%BA%8C%E7%AB%A0(%E6%9C%80%E9%80%82%E4%BA%A4%E6%98%93%E5%BE%AA%E7%8E%AF%E7%AE%97%E6%B3%95%20TTC)%0A%20%20%20%20%20%20%20%20%E5%8D%95%E8%BE%B9%E5%8C%B9%E9%85%8D%0A%20%20%20%20%20%20%20%20%E8%82%BE%E8%84%8F%E7%A7%BB%E6%A4%8D%E6%A1%88%E4%BE%8B%0A%20%20%20%20%20%20%20%20%E5%AE%BF%E8%88%8D%E5%88%86%E9%85%8D%E6%A1%88%E4%BE%8B%0A%20%20%20%20%20%20%20%20%E5%B8%95%E7%B4%AF%E6%89%98%E6%9C%80%E4%BC%98%0A%20%20%20%20%E7%AC%AC%E4%B8%89%E7%AB%A0(%E5%BB%B6%E8%BF%9F%E6%8E%A5%E5%8F%97%E7%AE%97%E6%B3%95%20GS)%0A%20%20%20%20%20%20%20%20%E5%8F%8C%E8%BE%B9%E5%8C%B9%E9%85%8D%0A%20%20%20%20%20%20%20%20%E7%9B%B8%E4%BA%B2%E6%A1%88%E4%BE%8B%0A%20%20%20%20%20%20%20%20%E9%AB%98%E8%80%83%E6%8A%A5%E5%BF%97%E6%84%BF%E6%A1%88%E4%BE%8B%20(%E5%B9%B3%E8%A1%8C%E5%BF%97%E6%84%BF)%0A%20%20%20%20%20%20%20%20%E7%BA%BD%E7%BA%A6%E9%AB%98%E4%B8%AD%E7%94%B3%E8%AF%B7%E6%A1%88%E4%BE%8B%0A%20%20%20%20%20%20%20%20%E5%85%AC%E7%A7%9F%E6%88%BF%E5%88%86%E9%85%8D%E6%A1%88%E4%BE%8B%0A%20%20%20%20%E7%AC%AC%E5%9B%9B%E7%AB%A0(%E6%80%BB%E7%BB%93)%0A%20%20%20%20%20%20TTC%20%E5%92%8C%20GS%20%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%0A%20%20%20%20%20%20%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%0A%20%20%20%20%20%20%E7%90%86%E6%80%A7%E5%86%B3%E7%AD%96%0A%0A%0A"})]),fallback:A(()=>E[2]||(E[2]=[B(" Loading... ")])),_:1})),E[6]||(E[6]=r(`<h2 id="内容总结" tabindex="-1">内容总结 <a class="header-anchor" href="#内容总结" aria-label="Permalink to &quot;内容总结&quot;">​</a></h2><div class="language-ad-think vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ad-think</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>好的，用户提供了一段关于书籍《合适》的详细内容，涉及市场设计中的两种算法：TTC（最适交易循环算法）和GS（延迟接受算法）。用户希望得到关于这段内容的总结或分析。首先，需要识别用户的需求，可能是希望了解书的核心观点、两种算法的应用场景，或者如何将这些理论应用到实际生活中。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>接下来，需要整理用户提供的信息。书中通过实际例子，如肾源匹配、宿舍分配、高考志愿填报等，解释了TTC和GS算法的工作原理。TTC适用于单方面选择的场景，如资源分配，而GS用于双方互选的情况，如相亲或学校录取。用户可能希望明确两种算法的区别和实际应用案例。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>用户可能没有直接提问，但根据提供的详细内容，推测他们需要结构化的总结，可能包括作者背景、核心内容、算法解释、应用实例以及现实意义。需要确保回答清晰，用简明的语言概括关键点，并突出两种算法在不同情境下的有效性。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>另外，用户可能对经济学的实际应用感兴趣，特别是如何解决公平与效率的问题。因此，回答中应强调这些算法如何在不依赖价格机制的情况下实现资源的最优配置，以及它们对社会福利的积极影响。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>最后，需要检查回答是否符合用户提供的格式要求，避免使用Markdown，使用中文，保持口语化，分点清晰，并涵盖所有重要内容。确保信息准确，特别是关于诺贝尔奖和具体案例的细节，如纽约高中招生系统的改革效果。</span></span></code></pre></div><p>以下是关于《合适》一书的总结与分析：</p><hr><h3 id="核心内容提炼" tabindex="-1"><strong>核心内容提炼</strong> <a class="header-anchor" href="#核心内容提炼" aria-label="Permalink to &quot;**核心内容提炼**&quot;">​</a></h3><ol><li><p><strong>资源分配的挑战</strong></p><ul><li><strong>传统市场局限</strong>：价格机制在稀缺资源（如车牌、器官、婚姻匹配）中失效，需寻求公平分配方案。</li><li><strong>新兴经济学目标</strong>：通过非价格手段实现资源高效、公平分配，避免道德争议与社会矛盾。</li></ul></li><li><p><strong>两大核心算法</strong></p><ul><li><p><strong>TTC（最适交易循环算法）</strong></p><ul><li><strong>适用场景</strong>：单方决策权（如器官分配、宿舍分配）。</li><li><strong>运作逻辑</strong>：通过循环交换实现资源优化。 <ul><li>例：肾源匹配中，A→B→C→A形成闭环，最大化利用兼容血型。</li><li>特点：帕累托最优（无人受损，至少一人受益）。</li></ul></li></ul></li><li><p><strong>GS（延迟接受算法）</strong></p><ul><li><strong>适用场景</strong>：双方互选（如相亲、志愿填报）。</li><li><strong>运作逻辑</strong>：通过多轮“延迟选择”实现稳定匹配。 <ul><li>例：平行志愿填报中，系统优先匹配考生分数与学校偏好，减少落榜风险。</li><li>特点：主动方（如男生、考生）更易获得满意结果。</li></ul></li></ul></li></ul></li></ol><hr><h3 id="现实应用案例" tabindex="-1"><strong>现实应用案例</strong> <a class="header-anchor" href="#现实应用案例" aria-label="Permalink to &quot;**现实应用案例**&quot;">​</a></h3><ol><li><p><strong>医疗领域</strong></p><ul><li><strong>肾源匹配</strong>：TTC算法结合数据库，快速筛选血型兼容的供体-受体组合，提升移植效率（韩国、美国已应用）。</li></ul></li><li><p><strong>教育系统</strong></p><ul><li><strong>纽约高中招生改革</strong>：GS算法替代传统志愿填报，减少行政分配比例（从3万降至3千），提升学生-学校匹配满意度。</li></ul></li><li><p><strong>社会福利</strong></p><ul><li><strong>公租房分配</strong>：结合申请人偏好（地段、楼层）与政府优先级（老年、低收入家庭），优化资源分配公平性。</li></ul></li><li><p><strong>婚恋市场</strong></p><ul><li><strong>相亲匹配</strong>：GS算法通过多轮“表白-保留”机制，减少不稳定婚姻风险。</li></ul></li></ol><hr><h3 id="经济学启示" tabindex="-1"><strong>经济学启示</strong> <a class="header-anchor" href="#经济学启示" aria-label="Permalink to &quot;**经济学启示**&quot;">​</a></h3><ol><li><p><strong>理性与公平的结合</strong></p><ul><li>传统经济学依赖价格，而新兴经济学通过算法平衡效率与伦理。</li><li>例：车牌摇号避免富人垄断，器官分配拒绝“价高者得”。</li></ul></li><li><p><strong>生活中的隐性算法</strong></p><ul><li>宿舍调换、校服交换等日常行为本质是TTC的简化应用。</li><li>选秀PK赛制、企业招聘流程隐含GS逻辑。</li></ul></li><li><p><strong>技术赋能分配</strong></p><ul><li>大数据时代，算法可快速处理复杂匹配问题（如肾源数据库、招生系统）。</li></ul></li></ol><hr><h3 id="争议与思考" tabindex="-1"><strong>争议与思考</strong> <a class="header-anchor" href="#争议与思考" aria-label="Permalink to &quot;**争议与思考**&quot;">​</a></h3><ol><li><p><strong>算法的局限性</strong></p><ul><li>TTC依赖资源流动性，GS需双方偏好透明化，实际应用中可能受信息不对称影响。</li></ul></li><li><p><strong>人性化考量</strong></p><ul><li>匹配算法可能忽略情感因素（如婚姻中的非理性选择）。</li><li>社会福利分配需平衡效率与人文关怀（如公租房的地理便利性）。</li></ul></li></ol><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><p>《合适》通过生活化案例，揭示了经济学如何以算法工具破解资源分配难题：</p><ul><li><strong>TTC</strong>：解决“物尽其用”，适用于单向选择场景；</li><li><strong>GS</strong>：实现“两厢情愿”，适用于双向互选需求。 两者的核心在于，通过规则设计让稀缺资源跳出“价高者得”或“随机运气”的困境，走向更理性的公平。</li></ul><h2 id="修复文案" tabindex="-1">修复文案 <a class="header-anchor" href="#修复文案" aria-label="Permalink to &quot;修复文案&quot;">​</a></h2><p>关于作者</p><p>板井丰贵，日本人，美国罗彻斯特大学经济学博士，专门从事市场设计领域。</p><p>关于本书</p><p>作者给我们介绍了怎样公平地分配特殊资源，包括2种方法，一种叫 TTC，也叫最适交易循环算法。另一个叫 GS，也叫延迟接受算法。</p><p>核心内容</p><p>这本书主要给我们用很简单的例子解释了几个经济学理论，最适交易循环算法也就是 TTC 算法，通过交换，解决了单方面匹配的问题，但在匹配双方都有决定权的情况下,适合使用延迟接受算法，也叫作 GS 算法，这个算法的核心就是让一方保留、延迟接受对方的匹配请求，实现两厢情愿。</p><p><img src="https://piccdn3.umiwi.com/img/201701/24/201701241841146810317353.jpg" alt=""></p><p>你好，欢迎每天听本书。今天给大家说的这本书叫《合适》，副标题是，从升学择校、相亲配对、牌照拍卖了解新兴实用经济学。</p><p>什么叫新兴实用经济学？它实际上是相对于传统经济学而言的，传统经济学实际上一直在致力于解决一个问题，就是资源的分配问题，把合适的东西交给最合适的人，在商品市场中，通常是价格在平衡这种资源的分配问题，好的商品就自然价格高，谁能出的起价自然就能得到更好的资源，这是市场运行的一个底层逻辑。</p><p>但是市场上还有一些特殊的领域，由于资源极度的稀缺，或是出于德道和公平的考虑，价格不起作用了，就是有钱也买不到想要的资源，比如说大城市的车牌号，难道是谁出的价高谁得车牌号吗？那样车牌号的价格会被炒上天的，中产阶级的家庭有可能永远也开不了车。再比如说人体的器官，一个孩子得了肾衰竭，急需要换肾，医院现在只有一个肾源，正要做手术呢突然有个有钱人跳出来说，我出5倍的价格买这个肾，要是按照市场的游戏规则，医院把肾给了有钱人，那就等于杀了这个孩子。谁都接受不了。再比如说找对象，难道条件好的就应该有很多个对象，条件一般的就应该断子绝孙吗？肯定不是这样。你看在这些领域钱往往就不起作用，那这种时候要怎么公平地分配资源，这就需要一套不一样的游戏规则了。今天我们就来说说这套游戏规则是啥，遇到这样的难题要如何解决。</p><p>这本书的作者叫板井丰贵，是一位日本人，他是美国罗彻斯特大学经济学博士，专门从事市场设计这个领域。对于上面这些难题，作者给我们介绍了2种方法，一种叫 TTC，也叫最适交易循环算法。另一个叫 GS，也叫延迟接受算法。GS 算法曾获得2012年的诺贝尔经济学奖。</p><p>听到诺贝尔经济学奖你可能有点晕哈，其实不用担心，经济学设计的工具归根结底都是解决我们日常生活中的问题的，我们可以想象一群很聪明的人在一个圆桌上开会，现在什么问题最难搞？失业问题最难搞，连奥巴马都解决不了，一桌子人是你看我我看你，谁都不吱声，这时候突然有一个人跳出来说，我有好的办法，然后写了一篇学术论文，大家一看这个办法好呀，然后每次遇到这个问题都纷纷转载引用，慢慢他的理论被大家公认觉得好，于是就给他发个奖表彰他的贡献。这就是2010年的诺贝尔经济学奖研究的问题。</p><p>再比如大家觉得全球气候变暖让人类对气候、海洋这些类似公地性质的问题如何处理一筹莫展，大家眼看就要为这些多出来的地方打起来了，这时候一位老太太站出来说，我有办法。大家一听觉得好，于是给他发个奖。这就是2009年诺贝尔经济学奖研究的问题。</p><p>你看诺奖其实都是在解决最根本问题，只不过他们的表述看起来很专业，其实他们的内核并不是那么复杂。这本书中作者就给我们把这些理论，用大白话清晰地表述了出来，然我们能清楚地看明白，下面我们就来看看这两种理论讲了些什么。</p><p>我们先来看第一个，什么是最适交易算法。</p><p>资源分配的本质就是物尽其用，把正确的东西摆在最需要的位置。把相对稀缺的资源尽可能地用在最合适的地方，用最少的资源消耗获得最大的收益，才能让资源发挥最大的作用。</p><p>我们之前遇到需要分配的问题，解决的方法可能都是比较简单粗暴的，比如说按照先来后来、摇号、抓阄。比如说去出差开会，如果你没有特殊交代，一般都是按照报到的先后顺序安排酒店房间。买房买车、孩子上学，都得摇号派位，这样做的确是比较高效率，并且很公平，会让人觉得，你看，谁也没干预进来，这些决定也都是系统自己生成的，如果轮到你了，你就去，轮不到你，你也不要生气，那就是自己运气的问题，下次继续。</p><p>但是一些资源你既不能拿钱买，又不能一个劲地等着，比如说需要进行器官移植的病人，时间就是生命，不可能一直被动地等到肾源的出现。这个时候就需要有一个高效的方法，迅速的地找到合适的捐献者，然后进行手术。最适交易循环算法在这时候就起作用了。</p><p>就拿肾源的情况举例。我们来看下怎样要配对肾源，第一个条件就是病人和捐献人他们的血型必须得吻合。吻合的条件是 O 型血可以给任何一种血型捐献，反之不可，A 型和 B 型可以分别给 A、B、AB 型提供，反之不可，A 和 B 型血不能相互提供。在这里，咱们把能配对成功的一组叫做合适组，把不能配对的一组叫做不适合组。</p><p>好，现在咱们来看应该怎样配对，让成功率变得最高。设想一个场景，有两个人病人都找到肾源，但是血型不合适，一个是 A 型患者和 B 型捐献者，一个是 B 型患者和 A 型捐献者。我们就可以让他们把捐献者对调一下，就配对成功了。这个是最简单的交换方式，但是这样一次就互换成功的理想情况实在是太少了。</p><p>咱们再来看复杂一点的，现在有三组，分别是 AB 型的患者对应 O 型捐献者，B 型患者对应 A 型捐献者，O 型患者和 B 型捐献者。我们来看一下，如果按照他们现在的两两配对是都没有办法完成手术的。但是我们调换一下顺序，就能得到新的组合：AB 型患者对应 A 型捐献者，O 型患者对应 O 型捐献者，B 型患者对应 B 型捐献者，这样子问题就完美解决了。</p><p>我们再来提高复杂程度，如果真的是运气不好，这几组怎么都没法通过交换匹配到合适的，这可怎么办？这时候就需要一个活雷锋的出现，也就是出现多余的肾源，让这几个链条从源头上多一些选择，有了富余的器官，就可以把里面的那个不合适的人替换出来，替换出来的人可以用在之后的捐献中。当肾源越来越多的时候，找到合适的肾源就越容易，也就是越容易进行匹配。</p><p>最早的肾源交换是在1991 年发生的，现在随着大数据的发展，越来越多捐献者和患者的信息都可以被大家更容易地搜索到。当我们把肾源数据库里面植入这种算法之后，那就能在很短的时间里面，配对到更多合适的肾源了，就能挽救更多人的生命，作者说现在在韩国和美国都建立起了这样的数据库，帮助到了许多需要帮助的人。</p><p>你可能觉得上面的这一套方法，其实就是一个交换的问题，只需要排列组合就行了，和经济学看着没啥大关系呀。其实把肾脏的移植匹配问题换个思路，就变成了怎么样让肾脏的需求者和肾脏的供给者之间实现需求平衡，也可以看成就是我们要如何很有效地让这种稀缺资源实现最高效的利用，但因为这种资源不能直接拿钱买，所以我们就要换一种方法让它们实现最大限度的利用，也就是最佳匹配。</p><p>其实上面这个方法在很多时候我们都已经在使用了，比如说打比赛时候的战队组合，让一些队员排列组合在一起会更加默契，赢的几率就会大好多。一些本来我们不需要的东西，有时候和别人进行交换，就可以皆大欢喜，省钱又开心。还有我们小时候可能都经历过这件事情，就是学校发的校服，总有人拿到的不合身，有的人特别大，有的人特别小，这时候，老师一般都会说，你们自己问一问谁的能换一换，大家就开始了内部交换。这种方法比把衣服重新返回到厂里调换要方便得多。</p><p>咱们把需要调换的对象数量进一步扩大，再来看一个例子，就是分宿舍。一般咱们学校的宿舍都是按照你去报到的顺序现场分，或者是提前按照你的姓名、学号或者是其他信息给你编号，等你报道那天直接住就行。但是这种从来没考虑过你个人喜好的分配方法，的确会出现住得心塞的情况，于是现在有很多学校都开始允许大家按照喜好自由结合。那咱们也用上面的算法来重新分一下宿舍。</p><p>想象下现在开学了，你是宿管老师，学校已经分配好了宿舍，但是还有7个同学找你说想调宿舍，于是你把大家都聚在一起准备解决这个事情。但是换宿舍也是有前提的，那就是不保证每个人都能分到最想要的房间，但是经过调换的房间不会你现在的更差，其实这个例子就和上面捐肾的例子是一样的，学生就像是病人，房子就是他们的肾源。</p><p>现在一共是7个学生要换房间，咱们先问问他们都想换到哪个房间。第一轮问过了以后，发现里面有3个人是可以互换的，A 喜欢 B 的房间，B 喜欢 C 的，C 喜欢 A 的，他们正好形成了闭环。好了，这三个人得到了自己想要的房子就可以离开了。</p><p>接下来还剩下4个人，他们需要重新选择一个自己喜欢的房间，这一轮里1号喜欢2号，2号喜欢1号，3号喜欢4号，4号还是喜欢4号。那就是1号和2号形成了闭环，4号自己是一个闭环，3号落单了。那他就没得选了，只好还住自己之前的房子。</p><p>到这里，我们用了两轮，帮助7个人解决了分房子的问题，每个人都获得了结果，虽然说有两个人没有换到新的房子里，但是对他们来说，情况没有变得更坏。这是符合帕累托最优原则的，意思就是在没有使任何人境况变坏的前提下，使得至少一个人变得更好。</p><p>刚才咱们说的这种最适交易循环算法，是建立在双方中有一方是被动的，像肾源、宿舍这些都是没有选择能力的，在我们选择它们的时候，只有它们适不适合我们，它们对我们是没有决策权的。但是生活中有很多事情是双方相互选择的，比如说报志愿，首先你得过了分数线，然后报一个你想上的学校，这还没完，学校还得按分数高低录取，如果报名人数太多，可能你过了分数线也进不去。又比如说相亲，得双方都有感觉了，才算是成功。这种情况下，刚才的算法就不好用了。</p><p>比方说现在你就是红娘，有5个人需要介绍对象，一共是3男2女。每个人都介绍完自己，然后让男女生分别在心里把对方按照喜欢程度进行排序，然后让男生对最喜欢的女生表白，女生立马就要决定接不接受。咱们先来看一下男生喜欢的对象都是谁，3个男生里有2个人分别是 A 和 B，都喜欢同一个女生小美，还有1个男生 C 喜欢另1个女生小甜。再来看下女生的意愿，小美喜欢对她有好感的A，正好他俩两情相悦，形成稳定匹配。小甜喜欢男生B，但是B最喜欢的是小美，不过小甜也是有人喜欢的，男生 C 就喜欢小甜。</p><p>现在我们要给剩下的2个男生B、C给小甜配对。这时候问题就出现了，小甜喜欢的人不喜欢她，喜欢她的人她不喜欢，这样就会出现不稳定的匹配。选择喜欢她的吧，总会在心里惦记着自己更喜欢的那个人，跟这个人凑合着过；选择她喜欢的吧，明明知道对方心里有别的人，也是在委屈自己。</p><p>所以用之前的最适交易循环算法在相亲的活动中就不合适了，因为找对象的双方都是有选择权的。因为他们不满意现在的配对，就会出现离婚、私奔、出轨的可能。</p><p>在这里咱们就可以要到第二种算法：延迟接受算法，这个算法的核心就是让一方保留、延迟接受对方的匹配请求。</p><p>还用刚才相亲的这个例子，用的是立即接受的对策，就是我一表白，你就得立马决定接不接受，虽然大家能实现匹配，但这样的匹配是不稳定的。为了避免出轨的悲剧，现在咱们用延迟接受算法再来演示一遍。</p><p>第一轮，每个男生都向自己心里最喜欢的那个女孩子表白，如果女生只收到一个人的表白，那就直接配对成功，如果收到多个表白，就留下一个最喜欢的。然后开始第二轮，上一轮里面被拒绝的男生再向心目中第二喜欢的女孩子表白，女孩子把第一轮和第二轮里对自己表白的男生进行对比，留一个自己喜欢的。然后用同样的方法开始第三轮，直到最后没有男生再去表白了，然后获得了表白的姑娘们，就可以选择接受表白，相亲成功。</p><p>在这个匹配过程中，每个人选到的都是自己可选范围中最好的那一个了。女孩子在每一次的比较中，留下的都是更喜欢的那一个，男孩子总是对可选择范围内最喜欢的那个姑娘表白。用这种算法，就会避免这种情况，就是男生在第一次表白失败后，去向第二喜欢的人表白，但是这个人却已经被人挑走了。</p><p>并且，这种相亲的方式中，主动表白的那一方更容易获得满意的结果。打眼一看咱们可能觉得肯定是女生有优势，因为她们可以选择接受或者是拒绝。但是其实这个算法是对男生有利的。你看啊，如果你是男生，要给自己相中的那个女孩子表白，你需要的是给那些也同样跟她表白过的男生进行竞争。但是女孩子是否能获得自己真正喜欢那个男生的表白，就得看男生在第几轮的时候给你表白了，也就是说她的对手是所有的女孩子。就像男生虽然被拒绝了50次，但是他还是可以在剩下的女孩子中挑一个自己喜欢的。</p><p>其实这个方法还经常用在选秀比赛的 pk 战里。让下一个选手和上一次 pk 成功的那个人再进行比较，直到选出来最后胜出的人。</p><p>再比如我们高考报志愿，现在都是用平行志愿。十多年前我们用的叫顺序志愿，就是在同一个录取批次设置的多个院校志愿，按照第一志愿、第二志愿分先后顺序。计算机投档时把相同志愿的考生分别排队，然后根据分数从高到低向对应的院校投档。</p><p>这种报志愿的方法就容易遇到问题，就是考生可能成绩很好，但是志愿报不好可能就会很遗憾地落榜。打个比方，高中生小张今年考了700分，分数很高吧，他第一志愿报了清华，第二志愿报了复旦，然而今年报清华的人特别多，就招收30个人，他的成绩虽然很好，但是排在了第35，清华就没戏了，然后就要回过头看一下复旦大学的录取情况，但这个时候，复旦的人已经录取满了，小张没有机会了。并且有个更闹心的情况，就是他的同学小李，考了690分，但是因为是第一志愿报的复旦，报复旦的总人数又比较少，就顺利地被录取了。</p><p>这下700分的小张第一志愿没有被录取，第二志愿又没有名额了。按理说他应该比690分的小李上一个更好的学校，但是因为志愿的问题，他就要面临复读，或者等着下一批报志愿的时候再报，就会特别的亏。</p><p>这时候还会出现不符合你本来成绩的志愿。因为虽然你想上清华，但是你怕和前面小张一样两头都落空，为了保险就报了一个很一般的学校，虽然这样录取的几率比较大，但是你可能就进到了一个你不大喜欢的大学，并且你比这个学校的录取分数要高出去一大截，听起来还是很亏。</p><p>现在报志愿的方法就变成了平行志愿。其实这个平行志愿和延迟接受算法的套路是差不多的。平行志愿遵循的是分数优先，遵循志愿。还拿小张来说，他的第一志愿可以报ABCD四个学校，这几个学校是没有顺序优先的。然后系统检索到小张的时候，计算机会同时判断他填报的这4个志愿是不是已经都被报满了。</p><p>在这种报志愿的系统里，只要有一个没有报满的，就会把小张的档案预投进去，如果好几个学校都没有报满，就按照他报志愿的顺序预投放到靠前的那所学校里。等所有的考生都检索完毕了，然后再把已经预投的档案正式地投档给各个学校，这个就像女孩子已经保留了喜欢的男生，最后答应男生的求婚。并且这样对于学校来说，因为 ABCD 没有层级的区分，不管是考生进入到了哪个学校，他们都是学校的第一志愿考生。</p><p>这两种不一样的报志愿方式，区别就在于顺序志愿的时候，可以说你只有一次的选择机会，学校会直接接受或拒绝，但是平行志愿就可以每次都在合适的范围内选出最优的匹配。</p><p>原来纽约的高中申请系统是这样子的，申请学生将填报的前五所学校志愿发给学校，学校决定录取、拒绝或是待定。整个录取过程重复两轮以上，对于三轮仍未被录取的学生，由政府主管部门进行直接分派。这个过程里面，就和顺序志愿一样，很多学生不敢写自己最喜欢的学校，学校也没有充分的机会来发放录取书，每年都会有3万多名学生需要政府用行政手段分配，分配到的学校又不是学生自己报的志愿，肯定不是学生最希望的那一个学校，对于学校也是一样，你最想选择的对象不是我，我最想要的学生也没给我分配进来。2003年，美国的经济学家罗斯就用这个延迟接受算法给纽约市重新设计了招生系统，解决了招生堵塞的问题。刚开始实施的第一年，就有了特别明显的效果，到最后只有3000名学生需要行政分配，比之前减少了90%，不管是学校、学生还是政府，都是皆大欢喜。</p><p>还有学者把这个算法设想运用在公租房、廉租房这一类社会福利资源的分配上面。现在主要的分配方法就是摇号，一轮摇不中了就等下一轮。但是如果摇中了，还会存在的一个问题就是我分配到的房子太远了，没有住的价值。你想啊，好不容易分到了房子，又不能住，对于咱们来说是浪费感情，对于这些福利资源来说，又是浪费。</p><p>为什么会这样？因为这种分配方法没有考虑到大家的需求差异。就像不管你喜欢什么样的人，都随便给你安排对象一样，遇到你不喜欢的你可能根本不想去联系他。</p><p>他提出的匹配方法是这样的：由申请人先提出预约，这时候的预约，肯定是申请人按照自己的喜好选择的房子，然后再提交自己的工作地点、年龄、收入等这一类的信息。系统就把这些收集到的信息做出申请人的偏好数据库，等申请人都提交了不同的理想房源项目，然后就需要按照延迟接受算法，把申请人分配到具体的房间里。</p><p>这里的房间和咱们之前分宿舍的例子是有点区别的，在分宿舍的时候，宿舍是不能挑选我们的，是被动的。但在这里，房间也会对入住的人进行筛选，用来保证社会福利的最大化使用。所以我们也要做一个房间的偏好数据库，比如把楼层按照1-5层一组，6-10层一组，10层以上一组，分别编制好顺序，把有老年人、儿童或者是身体健康状况比较差、收入比较低的家庭排在前面，让他们能优先选择，那些年轻成年人家庭、收入较高家庭在偏好排序集中顺序靠后。然后按照编制好的偏好顺序数据库用延迟接受算法进行匹配。</p><p>这种方法充分考虑了匹配双方的偏好顺序和差异化需求，让最需要的人住进可接受范围之内最适合的房子。</p><p>总结一下，这本书主要给我们用很简单的例子解释了几个经济学理论，最适交易循环算法也就是 TTC 算法，通过交换，解决了单方面匹配的问题，但在匹配双方都有决定权的情况下,适合使用延迟接受算法，也叫作 GS 算法，这个算法的核心就是让一方保留、延迟接受对方的匹配请求，实现两厢情愿。这本书的核心就是把这些算法运用到我们的生活中，让大家都尽可能分到喜欢的好的东西。</p><p>这本书会让你有一种反差感，一些很简单的做法，也许我们平时都在运用它们，但都没有发现它们可以运用在其他领域去解决很多疑难问题。经济学并不是我们每个人的必修课，但是经济学的另外一个作用就是让我们能够更加地理性，寻找到问题的最优解决办法，不管是商业中怎么去判断和引导对方的选择，还是自己在决策的时候怎样实现判断。这本书都是从很常见的事情作为切入点，把高大上的理论用接地气的方式解释明白，都能给我们一些很有用的思路。</p><p>撰稿：时康洁 脑图：摩西 转述：孙潇</p>`,76))])}const T=t(C,[["render",d]]);export{c as __pageData,T as default};
